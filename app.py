import streamlit as st
import torch
from transformers import pipeline
import pandas as pd
import random
import altair as alt
import os
from datetime import datetime
import gc # Garbage Collector –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
JOURNAL_FILE = "journal.csv"
EMOTION_COLORS = { "—Ä–∞–¥–æ—Å—Ç—å": "#4CAF50", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "#2196F3", "—É–¥–∏–≤–ª–µ–Ω–∏–µ": "#FFC107", "–≥—Ä—É—Å—Ç—å": "#FFEB3B", "—Ç—Ä–µ–≤–æ–≥–∞": "#FF9800", "–≥–Ω–µ–≤": "#F44336" }
BASE_EMOTIONS = list(EMOTION_COLORS.keys())
RECOMMENDATIONS = {
    "—Ä–∞–¥–æ—Å—Ç—å": ["–û—Ç–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π —Å –∫–µ–º-—Ç–æ –µ—â–µ —Å–µ–≥–æ–¥–Ω—è.", "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å—Å—è –ª—é–±–∏–º—ã–º —Ö–æ–±–±–∏. –ù–µ —É–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –º–æ–º–µ–Ω—Ç!"],
    "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": ["–í—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≥–∞—Ä–º–æ–Ω–∏–∏. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏.", "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äî —ç—Ç–æ —Å–≤–µ—Ä—Ö—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ, —á—Ç–æ–±—ã –æ–±–¥—É–º–∞—Ç—å –≤–∞–∂–Ω—ã–µ –≤–µ—â–∏."],
    "–≥—Ä—É—Å—Ç—å": ["–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–∏—Ç–µ. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ —ç—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–µ –æ—Å—É–∂–¥–∞—è.", "–ò–Ω–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–∞—è –º—É–∑—ã–∫–∞ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∏–ª—å–º ‚Äî –ª—É—á—à–µ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –æ—Ç –ø–µ—á–∞–ª–∏."],
    "—Ç—Ä–µ–≤–æ–≥–∞": ["–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å 5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤.", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–æ–º, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."],
    "–≥–Ω–µ–≤": ["–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≥–Ω–µ–≤, –∏ —ç—Ç–æ —Å–∏–ª—å–Ω–∞—è —ç–º–æ—Ü–∏—è. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞, –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å.", "–ü—Ä–µ–∂–¥–µ —á–µ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å, —Å–¥–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—É."],
    "—É–¥–∏–≤–ª–µ–Ω–∏–µ": ["–ß—Ç–æ-—Ç–æ –≤–∞—Å —É–¥–∏–≤–∏–ª–æ! –ú–∏—Ä –ø–æ–ª–æ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–µ–π, –∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º."]
}

# --- –§–£–ù–ö–¶–ò–ò ---
def load_speech_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¢–û–õ–¨–ö–û –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
    device = "cuda:0" if torch.cuda.is_available() else "cpu"
    speech_recognizer = pipeline("automatic-speech-recognition", model="openai/whisper-base", device=device)
    print("–ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    return speech_recognizer

def load_emotion_models():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¢–û–õ–¨–ö–û –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π."""
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —ç–º–æ—Ü–∏–π...")
    emotion_classifier_zeroshot = pipeline("zero-shot-classification", model="MoritzLaurer/mDeBERTa-v3-base-mnli-xnli")
    emotion_classifier_specialized = pipeline("text-classification", model="SamLowe/roberta-base-go_emotions", top_k=None, truncation=True)
    print("–ú–æ–¥–µ–ª–∏ —ç–º–æ—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    return emotion_classifier_zeroshot, emotion_classifier_specialized

def get_recommendation(emotion_results):
    dominant_emotion = emotion_results['labels'][0]
    if dominant_emotion in RECOMMENDATIONS:
        return random.choice(RECOMMENDATIONS[dominant_emotion])
    return "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ —Å–µ–±–µ."

def save_to_journal(text, zeroshot_results, specialized_emotions, recommendation):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    emotion_scores = {label: 0.0 for label in BASE_EMOTIONS}
    for label, score in zip(zeroshot_results['labels'], zeroshot_results['scores']):
        if label in emotion_scores:
            emotion_scores[label] = score
    df_zeroshot = pd.DataFrame({'label': zeroshot_results['labels'], 'score': zeroshot_results['scores']})
    top_3_zeroshot = ", ".join([f"{row['label']} ({row['score']:.2f})" for index, row in df_zeroshot.head(3).iterrows()])
    top_3_goemotions = ", ".join([f"{e['label']} ({e['score']:.2f})" for e in specialized_emotions[0][:3]])
    new_entry = {
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": timestamp, "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç": text, "–í—ã–¥–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç": recommendation,
        "–¢–û–ü-3 (6 –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π)": top_3_zeroshot, "–¢–û–ü-3 (GoEmotions)": top_3_goemotions, **emotion_scores
    }
    df_new = pd.DataFrame([new_entry])
    if not os.path.exists(JOURNAL_FILE):
        df_new.to_csv(JOURNAL_FILE, index=False, encoding='utf-8-sig')
    else:
        df_new.to_csv(JOURNAL_FILE, mode='a', header=False, index=False, encoding='utf-8-sig')

# --- –ì–õ–ê–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ---
st.set_page_config(layout="wide")
st.title("üéß –ö–∞—Ä–º–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥")

st.markdown("""<style> .stDataFrame div[data-testid="stVerticalBlock"] { white-space: normal !important; line-height: 1.5 !important; } </style>""", unsafe_allow_html=True)

if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = None

tab1, tab2 = st.tabs(["–ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏", "–ú–æ–π –∂—É—Ä–Ω–∞–ª"])

# --- –í–ö–õ–ê–î–ö–ê 1: –ê–ù–ê–õ–ò–ó –°–ï–°–°–ò–ò ---
with tab1:
    st.header("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (.wav, .mp3)", type=["wav", "mp3"])

    if uploaded_file is not None:
        st.audio(uploaded_file, format='audio/wav')
        
        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
            transcribed_text = None
            with st.spinner("–≠—Ç–∞–ø 1/2: –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)"):
                speech_recognizer = load_speech_model()
                audio_bytes = uploaded_file.getvalue()
                transcribed_text = speech_recognizer(audio_bytes, return_timestamps=True)["text"]
                del speech_recognizer
                gc.collect()
            
            if transcribed_text:
                with st.spinner("–≠—Ç–∞–ø 2/2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–º–æ—Ü–∏–∏..."):
                    emotion_classifier_zeroshot, emotion_classifier_specialized = load_emotion_models()
                    emotion_results_zeroshot = emotion_classifier_zeroshot(transcribed_text, BASE_EMOTIONS)
                    emotion_results_specialized = emotion_classifier_specialized(transcribed_text)
                    st.session_state.analysis_results = {
                        "text": transcribed_text,
                        "zeroshot": emotion_results_zeroshot,
                        "specialized": emotion_results_specialized
                    }
                    del emotion_classifier_zeroshot, emotion_classifier_specialized
                    gc.collect()

    if st.session_state.analysis_results:
        results = st.session_state.analysis_results
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ê–Ω–∞–ª–∏–∑–∞")
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("–ê–Ω–∞–ª–∏–∑ (–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)")
            chart_data1 = pd.DataFrame({'–≠–º–æ—Ü–∏—è': results['zeroshot']['labels'], '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': results['zeroshot']['scores']})
            chart1 = alt.Chart(chart_data1).mark_bar().encode(x='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', y=alt.Y('–≠–º–æ—Ü–∏—è', sort='-x'), color=alt.Color('–≠–º–æ—Ü–∏—è', scale=alt.Scale(domain=list(EMOTION_COLORS.keys()), range=list(EMOTION_COLORS.values())), legend=None)).properties(title='6 –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π')
            st.altair_chart(chart1, use_container_width=True)
        with col2:
            st.subheader("–ê–Ω–∞–ª–∏–∑ (–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å GoEmotions)")
            chart_data2 = pd.DataFrame(results['specialized'][0]).rename(columns={'label': '–≠–º–æ—Ü–∏—è', 'score': '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å'}).head(7)
            chart2 = alt.Chart(chart_data2).mark_bar().encode(x='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å', y=alt.Y('–≠–º–æ—Ü–∏—è', sort='-x')).properties(title='–¢–û–ü-7 –∏–∑ 28 —ç–º–æ—Ü–∏–π')
            st.altair_chart(chart2, use_container_width=True)
        st.info(f"**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:** {results['text']}")
        st.divider()
        recommendation = get_recommendation(results['zeroshot'])
        st.subheader("üí° –ú–æ–π –≤–∞–º —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
        st.success(recommendation)
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∂—É—Ä–Ω–∞–ª"):
            save_to_journal(results['text'], results['zeroshot'], results['specialized'], recommendation)
            st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–º –∂—É—Ä–Ω–∞–ª–µ!")
            st.session_state.analysis_results = None 
            st.rerun()

# --- –í–ö–õ–ê–î–ö–ê 2: –ú–û–ô –ñ–£–†–ù–ê–õ ---
with tab2:
    st.header("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏ –¥–∏–Ω–∞–º–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
    if os.path.exists(JOURNAL_FILE):
        journal_df = pd.read_csv(JOURNAL_FILE)
        st.subheader("–í—Å–µ –∑–∞–ø–∏—Å–∏")
        display_columns = ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–í—ã–¥–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç", "–¢–û–ü-3 (6 –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π)", "–¢–û–ü-3 (GoEmotions)"]
        st.dataframe(journal_df[display_columns], use_container_width=True, hide_index=True)
        st.divider()
        if len(journal_df) > 1:
            st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –≤–∞—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
            journal_df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'] = pd.to_datetime(journal_df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'])
            emotions_over_time = journal_df[['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'] + BASE_EMOTIONS]
            df_melted = emotions_over_time.melt('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', var_name='–≠–º–æ—Ü–∏—è', value_name='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
            trend_chart = alt.Chart(df_melted).mark_line(point=True).encode(
                x=alt.X('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:T', title='–î–∞—Ç–∞'),
                y=alt.Y('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:Q', title='–°–∏–ª–∞ —ç–º–æ—Ü–∏–∏'),
                color=alt.Color('–≠–º–æ—Ü–∏—è:N', title='–≠–º–æ—Ü–∏—è', scale=alt.Scale(domain=list(EMOTION_COLORS.keys()), range=list(EMOTION_COLORS.values()))),
                tooltip=['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–≠–º–æ—Ü–∏—è', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å']
            ).properties(title='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –ø–æ –¥–Ω—è–º').interactive()
            st.altair_chart(trend_chart, use_container_width=True)
    else:
        st.info("–í–∞—à –∂—É—Ä–Ω–∞–ª –ø–æ–∫–∞ –ø—É—Å—Ç.")